
### ✅ ds_allocator_t/alloc導入エラー解決チェックリスト


- [ ] すべてのAPI宣言/実装で `const ds_allocator_t* alloc` が追加済みか



 ds_allocator_t/alloc導入エラー解決における、Cプロジェクトにおけるエラー・設計ミスパターンまとめ







13. 重複typedefの発生例（log.txtより）
	•	エラーログ抜粋

log.txt:130:tests/ds/test_round_robin.c:24:3: error: typedef redefinition with different types ('struct my_process_t' vs 'struct my_process_t')
log.txt:143:   67 | typedef struct ds_process               ds_process_t;
log.txt:155:   67 | typedef struct ds_process               ds_process_t;
log.txt:161:   67 | typedef struct ds_process               ds_process_t;
log.txt:167:   67 | typedef struct ds_process               ds_process_t;
log.txt:191:   67 | typedef struct ds_process               ds_process_t;






⸻

2. main関数の引数が不正
	•	問題点:
C標準のmainに許されない引数を追加している。
	•	代表例:

error: first argument of 'main' should be 'int'
error: 'main' takes only zero or two arguments


	•	解決策:
	•	main関数はint main(void) または int main(int argc, char **argv) のみ。

⸻

3. 関数定義と宣言の食い違い
	•	問題点:
ヘッダと実装ファイルで関数の引数や型が違う。
	•	代表例:

error: conflicting types for 'ds_lru_cache_destroy'; have 'ds_error_t(ds_lru_cache_t *)'
note: previous declaration of 'ds_lru_cache_destroy' with type 'ds_error_t(const ds_allocator_t *, ds_lru_cache_t *)'


	•	解決策:
	•	ヘッダと.cファイルのシグネチャ（引数・返り値）を必ず揃える。

⸻

4. 引数の数が足りない/順番が違う
	•	問題点:
関数呼び出し時、必要な引数を渡していない、順番が違う。
	•	代表例:

error: too few arguments to function 'ds_hashmap_get'


	•	解決策:
	•	ヘッダ記載通りに全ての引数を順番通り渡す。

⸻

5. 未定義の関数・シンボル
	•	問題点:
関数や型の宣言ヘッダをインクルードしていない、または宣言自体がない。
	•	代表例:

error: implicit declaration of function 'ds_malloc'; did you mean 'malloc'?


	•	解決策:
	•	必要なヘッダ（例：#include "util/memory.h"）を必ずインクルード。

⸻

6. 引数型の間違い（渡すもの・順番・型）
	•	問題点:
関数が要求する型（例: struct pointer, allocatorなど）と違う型を渡している。
	•	代表例:

error: passing argument 1 of 'ds_malloc' makes pointer from integer without a cast
note: expected 'const ds_allocator_t *' but argument is of type 'long unsigned int'


	•	解決策:
	•	正しい型で関数を呼ぶ（例：ds_malloc(alloc, 1, sizeof(type))）。

⸻

7. 関数の入れ子定義（Cでは禁止）
	•	問題点:
関数内に関数を定義している。
	•	代表例:

ISO C forbids nested functions [-Werror=pedantic]


	•	解決策:
	•	全ての関数定義はファイルのトップレベルで行う。

⸻

8. 未使用変数・未使用引数
	•	問題点:
定義したが使っていない変数・引数が残っている。
	•	代表例:

error: unused parameter 'alloc' [-Werror=unused-parameter]
error: unused variable 'node' [-Werror=unused-variable]


	•	解決策:
	•	使わない場合は削除、または(void)param;等で明示的に未使用を示す。












- [ ] すべてのAPI呼び出しで `alloc` を渡しているか
- [ ] すべてのcallocは `alloc->alloc+memset` に書き換え済みか
- [ ] `alloc->alloc(1, sizeof(T))` など構文エラーが無いか
- [ ] 直接malloc/free/calloc/realloc呼び出しは一切残っていないか
- [ ] テストでも適切なアロケータをDIしているか

[将来的に実運用/テストで安全なDI・アロケータ切り替えが可能！]

以下で`const ds_allocator_t* alloc` に置き換えが必要なファイルを確認できる


grep -rE 'malloc|free|calloc|realloc' include