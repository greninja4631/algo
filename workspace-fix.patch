docker使用前提なので、grepなどで検証するときは,Homebrew前提で教えて。



brew install doxygen  # 導入していない場合のみ

doxygen -g docs/Doxyfile    # 雛形生成（初回のみ）
doxygen docs/Doxyfile       # ドキュメント生成



🗂️ Dockerプロジェクト “ゼロから” エラー解決・品質担保フロー


【2. 直接 malloc/calloc/realloc/free 残存箇所】
----------------------------------------
を行ったコードを既存のコードを含めて完璧にガイドラインに沿って再構築して下さい




[✅] src/ds/url_shortener.c
   → _alloc/_free によるテスト用内部アロケータ（G_ALLOC）
      → 問題なし

[✅] src/memory.c
   → ds_malloc 実装のデフォルトで calloc フォールバック
      → 設計方針による

【方針メモ】
- "一切の直接呼び出し禁止" → 上記 ❌/⚠️ を全て ds_malloc/ds_free へ置換
- "alloc==NULL時の標準利用OK" → コメントやドキュメントで許容を明示

【3. grep置換チェックパターン】
----------------------------------------
- API宣言・定義に alloc 無しを抽出:
    grep -r 'ds_[a-zA-Z0-9_]*(.*)' include src | grep -v 'const ds_allocator_t *alloc'
- malloc/free/calloc/realloc 検出:
    grep -rE 'malloc|calloc|realloc|free' src include
- main定義統一チェック:
    grep -rE '^int main' src







	•	すべてのAPI呼び出しで alloc を渡しているか確認・修正
	•	すべてのcallocは alloc->alloc+memset に書き換え済みか確認・修正
	•	alloc->alloc(1, sizeof(T)) など構文エラーが無いか確認
	•	直接malloc/free/calloc/realloc呼び出しは一切残っていないか確認・grep修正
	•	テストでも適切なアロケータをDIしているか確認・修正
	•	include/util/memory.h の ds_malloc / ds_free 宣言を新型に統一、旧型を削除
	•	main関数を int main(int argc, char *argv[]) に統一
	•	ds_malloc 等を使うファイルすべてで #include "util/memory.h" を追加
	•	API呼び出しのalloc抜けを全て修正（手動/grepチェック）
	•	全ファイル末尾に改行を追加
※このフェーズで「grep」「ビルド」両面から“alloc DI徹底”を実現

⸻

2️⃣ Docker/ビルド・コンパイルエラー潰し
	•	🐳 Docker ビルドが通るかだけ確認
docker build --no-cache --progress=plain -t algo-ci .
	•	🔧 コンパイル停止系 (-Werror) を全部潰す
	•	必要なインクルード/プロトタイプ修正
	•	implicit declaration/redefinition/multiple definition等の解決

⸻

3️⃣ ユニットテスト緑化 & メモリチェック
	•	🧪 ユニットテスト緑化
docker run --rm -it algo-ci ./build/run_all_tests
	•	💧 Valgrind (リークゼロ)
docker run --rm -it algo-ci valgrind --leak-check=full build/run_all_tests

⸻

4️⃣ 静的解析/Lint/ドキュメント/CI整備
	•	🔍 Lint（cppcheck / clang-tidy）
	•	📚 Doxygen
	•	🔁 ２段ロック CI スクリプト整備
	•	run_dev.sh / run_ci_prod.sh / CI_MODE=prod対応

⸻

5️⃣ 開発環境/運用補助
	•	🛠️ Jenkins プラグイン依存
	•	plugin-cli/jenkins自体のセットアップ

⸻
