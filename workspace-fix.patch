


5. 共通（.c/.h）
	•	5-1 依存ヘッダ必須
	•	理由: size_t, int64_tは標準型なので <stddef.h>, <stdint.h>が無いとコンパイルエラー。
	•	修正方法:
	•	metrics系APIを宣言/実装するヘッダ・Cファイルの先頭で必ず

#include <stddef.h>
#include <stdint.h>

を忘れず記載。

	•	5-2 metrics系API競合
	•	理由: 他ヘッダ・Cファイルでmetrics系API宣言とmetrics.h内の型が完全一致していない場合も危険。
	•	修正方法:
	•	grepでds_metrics_を全件横断し、metrics.h以外に宣言があればmetrics.hだけに統一し他では削除する。

⸻

コピペ推奨：「metrics.h」最強版の冒頭例

#ifndef UTIL_METRICS_H
#define UTIL_METRICS_H

#include <stddef.h>
#include <stdint.h>
#include "data_structures.h"  // ds_error_t, ds_allocator_t, ds_metrics_t

// metrics系API宣言はここに一本化
// 例
ds_error_t ds_metrics_init(const ds_allocator_t *alloc, ds_metrics_t *metrics);
void       ds_metrics_print(const ds_allocator_t *alloc, const ds_metrics_t *metrics);
void       ds_metrics_reset_all(const ds_allocator_t *alloc);
void       ds_metrics_increment(const ds_allocator_t *alloc, const char *name);
int64_t    ds_metrics_get(const ds_allocator_t *alloc, const char *name);

#endif /* UTIL_METRICS_H */


⸻

✅ 上記を実行すれば、「型未定義」「多重宣言」「宣言型競合」のエラーは全て消えます。

もし「まだエラーが出る」「このAPIはどこが正解？」など具体ファイルや関数名で相談くれれば最短ルートで指摘・修正案を作成します！












# <stddef.h> 挿入（size_t使用＆未インクルードのみ）
find . \( -name "*.c" -o -name "*.h" \) -exec grep -l "size_t" {} + | xargs grep -L "#include <stddef.h>" | while read f; do
  sed -i '' '1s;^;#include <stddef.h>\n;' "$f"
done

# <stdint.h> 挿入（int64_t使用＆未インクルードのみ）
find . \( -name "*.c" -o -name "*.h" \) -exec grep -l "int64_t" {} + | xargs grep -L "#include <stdint.h>" | while read f; do
  sed -i '' '1s;^;#include <stdint.h>\n;' "$f"
done