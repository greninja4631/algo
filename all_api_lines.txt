src/memory.c:12:void ds_set_memory_functions(ds_malloc_func_t malloc_func, ds_free_func_t free_func) {
src/memory.c:20:void* ds_malloc(size_t size) {
src/memory.c:29:void ds_free(void* ptr) {
src/util/config.c:8:ds_error_t ds_config_create(const ds_allocator_t* alloc, ds_config_t **out_cfg)
src/util/config.c:16:void ds_config_destroy(ds_config_t *cfg)
src/stack.c:19:ds_error_t ds_stack_create(const ds_allocator_t* alloc, ds_stack_t **out_stack) {
src/stack.c:36:ds_error_t ds_stack_destroy(ds_stack_t *stack) {
src/stack.c:43:ds_error_t ds_stack_push(ds_stack_t *stack, void *data) {
src/stack.c:59:ds_error_t ds_stack_pop(ds_stack_t *stack, void **out_data) {
src/stack.c:66:ds_error_t ds_stack_peek(const ds_stack_t *stack, void **out_data) {
src/stack.c:73:bool ds_stack_is_empty(const ds_stack_t *stack) {
src/stack.c:77:size_t ds_stack_size(const ds_stack_t *stack) {
src/stack.c:81:ds_error_t ds_stack_reset(ds_stack_t *stack) {
src/stack.c:88:ds_error_t ds_stack_get_stats(const ds_stack_t *stack, ds_stats_t *stats) {
src/statistics.c:15:static int compare_ints(const void *a, const void *b) {
src/statistics.c:19:int sum(const int *data, int size) {
src/statistics.c:29:int min(const int *data, int size) {
src/statistics.c:39:int max(const int *data, int size) {
src/statistics.c:49:double average(const int *data, int size) {
src/statistics.c:57:double median(const int *data, int size) {
src/statistics.c:76:int mode(const int *data, int size) {
src/statistics.c:94:Statistics calculate_statistics(const int *data, int size) {
src/ds/url_shortener.c:16:static void encode_id(int id, char* out, size_t outlen) {
src/ds/url_shortener.c:28:ds_error_t ds_url_shortener_create(const ds_allocator_t* alloc, size_t capacity, ds_url_shortener_t** out_us) {
src/ds/url_shortener.c:40:ds_error_t ds_url_shortener_destroy(ds_url_shortener_t* us) {
src/ds/url_shortener.c:47:ds_error_t ds_url_shortener_shorten(ds_url_shortener_t* us, const char* url, char* out_short, size_t out_size) {
src/ds/url_shortener.c:58:ds_error_t ds_url_shortener_expand(ds_url_shortener_t* us, const char* short_url, char* out_url, size_t out_size) {
src/ds/next_next_practice.c:46:static ds_error_t node_create(int32_t v, ds_node_t **out)
src/ds/next_next_practice.c:61:static inline void node_destroy(ds_node_t *n)
src/ds/next_next_practice.c:69:static inline void dlist_init(ds_dlist_t *lst)
src/ds/next_next_practice.c:75:static void dlist_clear(ds_dlist_t *lst)
src/ds/next_next_practice.c:89:static ds_error_t stack_push(ds_dlist_t *lst, int32_t v)
src/ds/next_next_practice.c:106:static ds_error_t stack_pop(ds_dlist_t *lst, int32_t *out_v)
src/ds/next_next_practice.c:124:static __attribute__((unused)) ds_error_t queue_enqueue(ds_dlist_t *lst, int32_t v)
src/ds/next_next_practice.c:141:static inline ds_error_t queue_dequeue(ds_dlist_t *lst, int32_t *out_v)
src/ds/next_next_practice.c:147:static ds_error_t ur_init(ds_undo_redo_system_t *s)
src/ds/next_next_practice.c:156:static ds_error_t ur_execute(ds_undo_redo_system_t *s, int32_t v)
src/ds/next_next_practice.c:165:static ds_error_t ur_undo(ds_undo_redo_system_t *s)
src/ds/next_next_practice.c:175:static ds_error_t ur_redo(ds_undo_redo_system_t *s)
src/ds/next_next_practice.c:186:ds_error_t ds_next_next_practice_create(const ds_allocator_t* alloc, ds_next_next_practice_t **out_p)
src/ds/next_next_practice.c:196:void ds_next_next_practice_destroy(ds_next_next_practice_t *p)
src/ds/next_next_practice.c:207:ds_error_t ds_next_next_practice_run_all_demos(ds_next_next_practice_t *p)
src/ds/process.c:25:ds_process_t *ds_process_clone(const ds_process_t *src)
src/ds/process.c:34:void ds_process_destroy(ds_process_t *p)
src/ds/process.c:40:int ds_process_get_id(const ds_process_t *p)          { return p ? p->id         : 0; }
src/ds/process.c:41:int ds_process_get_burst_time(const ds_process_t *p)  { return p ? p->burst_time : 0; }
src/ds/doubly_list.c:24:static struct ds_doubly_list_node* create_node(void* data) {
src/ds/doubly_list.c:35:ds_doubly_list_t* ds_doubly_list_create(const ds_allocator_t* alloc, void) {
src/ds/doubly_list.c:45:ds_error_t ds_doubly_list_destroy(ds_doubly_list_t* list) {
src/ds/doubly_list.c:57:ds_error_t ds_doubly_list_insert_front(ds_doubly_list_t* list, void* data) {
src/ds/doubly_list.c:71:ds_error_t ds_doubly_list_insert_back(ds_doubly_list_t* list, void* data) {
src/ds/doubly_list.c:85:ds_error_t ds_doubly_list_insert_at(ds_doubly_list_t* list, size_t index, void* data) {
src/ds/doubly_list.c:107:ds_error_t ds_doubly_list_remove_front(ds_doubly_list_t* list, void** out_data) {
src/ds/doubly_list.c:124:ds_error_t ds_doubly_list_remove_back(ds_doubly_list_t* list, void** out_data) {
src/ds/doubly_list.c:141:ds_error_t ds_doubly_list_remove_at(ds_doubly_list_t* list, size_t index, void** out_data) {
src/ds/doubly_list.c:161:ds_error_t ds_doubly_list_get_at(const ds_doubly_list_t* list, size_t index, void** out_data) {
src/ds/doubly_list.c:170:bool ds_doubly_list_is_empty(const ds_doubly_list_t* list) {
src/ds/doubly_list.c:175:size_t ds_doubly_list_size(const ds_doubly_list_t* list) {
src/ds/doubly_list.c:180:ds_error_t ds_doubly_list_get_stats(const ds_doubly_list_t* list, ds_stats_t* stats) {
src/ds/history_system.c:9:static void static_clear_history(ds_history_system_t *hist);
src/ds/history_system.c:30:static history_node_t *make_node(const ds_command_t *cmd) {
src/ds/history_system.c:43:ds_history_system_create(const ds_allocator_t* alloc, size_t max_history)
src/ds/history_system.c:52:ds_history_system_destroy(ds_history_system_t *hist)
src/ds/history_system.c:99:ds_history_system_can_undo(const ds_history_system_t *hist)
src/ds/history_system.c:105:ds_history_system_can_redo(const ds_history_system_t *hist)
src/ds/history_system.c:111:ds_history_system_undo(ds_history_system_t *hist)
src/ds/history_system.c:125:ds_history_system_redo(ds_history_system_t *hist)
src/ds/history_system.c:145:static_clear_history(ds_history_system_t *hist)
src/ds/round_robin.c:31:ds_error_t ds_round_robin_scheduler_destroy(ds_round_robin_scheduler_t *sched)
src/ds/rpn_calculator.c:16:static int is_number(const char* str, double* out_val) {
src/ds/rpn_calculator.c:27:ds_error_t ds_rpn_calculator_create(const ds_allocator_t* alloc, ds_rpn_calculator_t** out_calc) {
src/ds/rpn_calculator.c:37:ds_error_t ds_rpn_calculator_destroy(ds_rpn_calculator_t* calc) {
src/ds/rpn_calculator.c:44:ds_error_t ds_rpn_calculator_reset(ds_rpn_calculator_t* calc) {
src/ds/rpn_calculator.c:49:ds_error_t ds_rpn_calculator_push(ds_rpn_calculator_t* calc, double value) {
src/ds/rpn_calculator.c:57:ds_error_t ds_rpn_calculator_pop(ds_rpn_calculator_t* calc, double* out_value) {
src/ds/rpn_calculator.c:74:ds_error_t ds_rpn_calculator_evaluate(ds_rpn_calculator_t* calc, const char* expression, double* out_result) {
src/ds/lru_cache.c:24:static void move_to_head(ds_lru_cache_t *cache, ds_lru_node_t *node);
src/ds/lru_cache.c:25:static void remove_tail(ds_lru_cache_t *cache);
src/ds/lru_cache.c:27:ds_error_t ds_lru_cache_create(const ds_allocator_t* alloc, size_t capacity, ds_lru_cache_t **out_cache) {
src/ds/lru_cache.c:41:ds_error_t ds_lru_cache_destroy(ds_lru_cache_t *cache) {
src/ds/lru_cache.c:55:ds_error_t ds_lru_cache_put(ds_lru_cache_t *cache, const char *key, void *value) {
src/ds/lru_cache.c:104:ds_error_t ds_lru_cache_get(ds_lru_cache_t *cache, const char *key, void **out_value) {
src/ds/lru_cache.c:116:ds_error_t ds_lru_cache_size(const ds_lru_cache_t *cache, size_t *out_size) {
src/ds/lru_cache.c:125:static void move_to_head(ds_lru_cache_t *cache, ds_lru_node_t *node) {
src/ds/lru_cache.c:141:static void remove_tail(ds_lru_cache_t *cache) {
src/ds/circular_list.c:15:ds_error_t ds_circular_list_create(const ds_allocator_t* alloc, ds_circular_list_t** out_list) {
src/ds/circular_list.c:25:ds_error_t ds_circular_list_destroy(ds_circular_list_t* list) {
src/ds/circular_list.c:41:ds_error_t ds_circular_list_insert(ds_circular_list_t* list, void* data) {
src/ds/circular_list.c:58:ds_error_t ds_circular_list_remove(ds_circular_list_t* list, void** out_data) {
src/ds/circular_list.c:74:bool ds_circular_list_is_empty(const ds_circular_list_t* list) {
src/ds/circular_list.c:78:size_t ds_circular_list_size(const ds_circular_list_t* list) {
src/logger.c:9:static void default_log(ds_log_level_t level, const char* fmt, va_list args) {
src/logger.c:19:void ds_set_log_function(ds_log_func_t func) {
src/logger.c:24:void ds_log(ds_log_level_t level, const char* fmt, ...) {
src/metrics.c:10:static void static_clear_named_metrics(void);
src/metrics.c:21:ds_error_t ds_metrics_init(const ds_allocator_t* alloc, ds_metrics_t *metrics) {
src/metrics.c:30:void ds_metrics_print(const ds_metrics_t *metrics) {
src/metrics.c:43:void ds_metrics_reset_all(void) {
src/metrics.c:56:static named_counter_t* find_named_counter(const char *name) {
src/metrics.c:64:void ds_metrics_increment(const char *name) {
src/metrics.c:79:int64_t ds_metrics_get(const char *name) {
src/metrics.c:86:static void static_clear_named_metrics(void) {
src/algo/sort.c:4:ds_error_t ds_sort_bubble(int* arr, size_t n) {
src/algo/sort.c:18:ds_error_t ds_sort_insertion(int* arr, size_t n) {
src/algo/search.c:4:ds_error_t ds_search_linear(const int* arr, size_t n, int target, ptrdiff_t* out_index) {
src/algo/search.c:16:ds_error_t ds_search_binary(const int* arr, size_t n, int target, ptrdiff_t* out_index) {
src/queue.c:25:ds_error_t ds_queue_create(const ds_allocator_t* alloc, ds_queue_t** out_queue) {
src/queue.c:35:ds_error_t ds_queue_destroy(ds_queue_t* queue) {
src/queue.c:47:ds_error_t ds_queue_enqueue(ds_queue_t* queue, void* data) {
src/queue.c:63:ds_error_t ds_queue_dequeue(ds_queue_t* queue, void** out_data) {
src/queue.c:75:ds_error_t ds_queue_front(const ds_queue_t* queue, void** out_data) {
src/queue.c:82:bool ds_queue_is_empty(const ds_queue_t* queue) {
src/queue.c:86:size_t ds_queue_size(const ds_queue_t* queue) {
src/queue.c:91:ds_error_t ds_queue_get_stats(const ds_queue_t* queue, ds_stats_t* stats) {
src/main.c:12:int main(void)
src/hashmap.c:22:static unsigned long _ds_hash_str(const char* s)
src/hashmap.c:53:ds_hashmap_destroy(ds_hashmap_t* map)
src/hashmap.c:72:ds_hashmap_put(ds_hashmap_t* map, const char* key, void* value)
src/hashmap.c:92:ds_hashmap_get(ds_hashmap_t* map, const char* key, void** out_val)
src/hashmap.c:107:ds_hashmap_remove(ds_hashmap_t* map, const char* key)
src/hashmap.c:132:ds_hashmap_size(const ds_hashmap_t* map)
include/util/config.h:26:ds_error_t ds_config_create(const ds_allocator_t* alloc, ds_config_t **out_cfg);
include/util/config.h:32:void ds_config_destroy(ds_config_t *cfg);
include/util/memory.h:12:void ds_set_memory_functions(ds_malloc_func_t malloc_func, ds_free_func_t free_func);
include/util/memory.h:14:void* ds_malloc(size_t size);
include/util/memory.h:15:void  ds_free(void* ptr);
include/util/metrics.h:16:ds_error_t ds_metrics_init(const ds_allocator_t* alloc, ds_metrics_t *metrics);
include/util/metrics.h:17:ds_error_t ds_metrics_increment_ops(ds_metrics_t *metrics);
include/util/metrics.h:18:ds_error_t ds_metrics_increment_elements(ds_metrics_t *metrics);
include/util/metrics.h:19:ds_error_t ds_metrics_decrement_elements(ds_metrics_t *metrics);
include/util/metrics.h:20:ds_error_t ds_metrics_add_memory(ds_metrics_t *metrics, size_t bytes);
include/util/metrics.h:21:ds_error_t ds_metrics_sub_memory(ds_metrics_t *metrics, size_t bytes);
include/util/metrics.h:22:void       ds_metrics_print(const ds_metrics_t *metrics);
include/util/metrics.h:23:void       ds_metrics_reset_all(void);
include/util/metrics.h:30:void    ds_metrics_increment(const char *name);
include/util/metrics.h:37:int64_t ds_metrics_get(const char *name);
include/util/logger.h:24:typedef void (*ds_log_func_t)(ds_log_level_t level, const char* fmt, va_list args);
include/util/logger.h:27:void ds_set_log_function(ds_log_func_t func);
include/util/logger.h:30:void ds_log(ds_log_level_t level, const char* fmt, ...);
include/ds/history_system.h:15:ds_history_system_t* ds_history_system_create(const ds_allocator_t* alloc, size_t max_history);
include/ds/history_system.h:16:ds_error_t ds_history_system_destroy(ds_history_system_t* history);
include/ds/history_system.h:17:ds_error_t ds_history_system_execute_command(ds_history_system_t* history, const ds_command_t* command);
include/ds/history_system.h:18:ds_error_t ds_history_system_undo(ds_history_system_t* history);
include/ds/history_system.h:19:ds_error_t ds_history_system_redo(ds_history_system_t* history);
include/ds/history_system.h:20:bool ds_history_system_can_undo(const ds_history_system_t* history);
include/ds/history_system.h:21:bool ds_history_system_can_redo(const ds_history_system_t* history);
include/ds/history_system.h:22:ds_error_t ds_history_system_clear(ds_history_system_t* history);
include/ds/lru_cache.h:14:ds_error_t ds_lru_cache_create(const ds_allocator_t* alloc, size_t capacity, ds_lru_cache_t** out_cache);
include/ds/lru_cache.h:16:ds_error_t ds_lru_cache_destroy(ds_lru_cache_t* cache);
include/ds/lru_cache.h:19:ds_error_t ds_lru_cache_put(ds_lru_cache_t* cache, const char* key, void* value);
include/ds/lru_cache.h:20:ds_error_t ds_lru_cache_get(ds_lru_cache_t* cache, const char* key, void** out_value);
include/ds/lru_cache.h:23:ds_error_t ds_lru_cache_size(const ds_lru_cache_t* cache, size_t* out_size);
include/ds/rpn_calculator.h:20:ds_error_t ds_rpn_calculator_create(const ds_allocator_t* alloc, ds_rpn_calculator_t** out_calc);
include/ds/rpn_calculator.h:25:ds_error_t ds_rpn_calculator_destroy(ds_rpn_calculator_t* calc);
include/ds/rpn_calculator.h:30:ds_error_t ds_rpn_calculator_reset(ds_rpn_calculator_t* calc);
include/ds/rpn_calculator.h:35:ds_error_t ds_rpn_calculator_push(ds_rpn_calculator_t* calc, double value);
include/ds/rpn_calculator.h:40:ds_error_t ds_rpn_calculator_pop(ds_rpn_calculator_t* calc, double* out_value);
include/ds/rpn_calculator.h:49:ds_error_t ds_rpn_calculator_evaluate(ds_rpn_calculator_t* calc, const char* expression, double* out_result);
include/ds/round_robin.h:20:ds_error_t ds_round_robin_scheduler_create(const ds_allocator_t* alloc, int time_quantum, ds_round_robin_scheduler_t** out_sched);
include/ds/round_robin.h:23:ds_error_t ds_round_robin_scheduler_destroy(ds_round_robin_scheduler_t* scheduler);
include/ds/round_robin.h:26:ds_error_t ds_round_robin_scheduler_add_process(ds_round_robin_scheduler_t* scheduler, const ds_process_t* process);
include/ds/round_robin.h:29:ds_error_t ds_round_robin_scheduler_get_next_process(ds_round_robin_scheduler_t* scheduler, ds_process_t** out_process);
include/ds/round_robin.h:32:ds_error_t ds_round_robin_scheduler_complete_process(ds_round_robin_scheduler_t* scheduler, int process_id);
include/ds/hashmap.h:13:typedef void (*ds_hashmap_free_func_t)(void*);
include/ds/hashmap.h:21:ds_error_t ds_hashmap_destroy(ds_hashmap_t* map);
include/ds/hashmap.h:22:ds_error_t ds_hashmap_put    (ds_hashmap_t* map, const char* key, void* value);
include/ds/hashmap.h:23:ds_error_t ds_hashmap_get    (ds_hashmap_t* map, const char* key, void** out_val);
include/ds/hashmap.h:24:ds_error_t ds_hashmap_remove (ds_hashmap_t* map, const char* key);
include/ds/hashmap.h:25:size_t     ds_hashmap_size   (const ds_hashmap_t* map);
include/ds/circular_list.h:10:ds_error_t ds_circular_list_create(const ds_allocator_t* alloc, ds_circular_list_t** out_list);
include/ds/circular_list.h:11:ds_error_t ds_circular_list_destroy(ds_circular_list_t* list);
include/ds/circular_list.h:12:ds_error_t ds_circular_list_insert(ds_circular_list_t* list, void* data);
include/ds/circular_list.h:13:ds_error_t ds_circular_list_remove(ds_circular_list_t* list, void** out_data);
include/ds/circular_list.h:14:bool       ds_circular_list_is_empty(const ds_circular_list_t* list);
include/ds/circular_list.h:15:size_t     ds_circular_list_size(const ds_circular_list_t* list);
include/ds/url_shortener.h:23:ds_error_t ds_url_shortener_create(const ds_allocator_t* alloc, size_t capacity, ds_url_shortener_t** out_us);
include/ds/url_shortener.h:30:ds_error_t ds_url_shortener_destroy(ds_url_shortener_t* us);
include/ds/url_shortener.h:40:ds_error_t ds_url_shortener_shorten(ds_url_shortener_t* us, const char* url, char* out_short, size_t out_size);
include/ds/url_shortener.h:50:ds_error_t ds_url_shortener_expand(ds_url_shortener_t* us, const char* short_url, char* out_url, size_t out_size);
include/ds/statistics.h:40:int sum(const int *data, int size);
include/ds/statistics.h:41:int min(const int *data, int size);
include/ds/statistics.h:42:int max(const int *data, int size);
include/ds/statistics.h:43:double average(const int *data, int size);
include/ds/statistics.h:44:double median(const int *data, int size);
include/ds/statistics.h:45:int mode(const int *data, int size);
include/ds/statistics.h:46:Statistics calculate_statistics(const int *data, int size);
include/ds/stack.h:14:ds_error_t ds_stack_create(const ds_allocator_t* alloc, ds_stack_t **out_stack);
include/ds/stack.h:15:ds_error_t ds_stack_destroy(ds_stack_t *stack);
include/ds/stack.h:16:ds_error_t ds_stack_push(ds_stack_t *stack, void *data);
include/ds/stack.h:17:ds_error_t ds_stack_pop(ds_stack_t *stack, void **out_data);
include/ds/stack.h:18:ds_error_t ds_stack_peek(const ds_stack_t *stack, void **out_data);
include/ds/stack.h:19:bool       ds_stack_is_empty(const ds_stack_t *stack);
include/ds/stack.h:20:size_t     ds_stack_size(const ds_stack_t *stack);
include/ds/stack.h:21:ds_error_t ds_stack_reset(ds_stack_t *stack);
include/ds/stack.h:22:ds_error_t ds_stack_get_stats(const ds_stack_t *stack, ds_stats_t *stats);
include/ds/process.h:17:ds_process_t *ds_process_clone(const ds_process_t *src);
include/ds/process.h:20:void ds_process_destroy(ds_process_t *process);
include/ds/process.h:23:int ds_process_get_id(const ds_process_t *p);
include/ds/process.h:24:int ds_process_get_burst_time(const ds_process_t *p);
include/ds/next_next_practice.h:28:ds_error_t ds_next_next_practice_create(const ds_allocator_t* alloc, ds_next_next_practice_t **out_p);
include/ds/next_next_practice.h:34:void       ds_next_next_practice_destroy(ds_next_next_practice_t *p);
include/ds/next_next_practice.h:43:ds_error_t ds_next_next_practice_run_all_demos(ds_next_next_practice_t *p);
include/ds/doubly_list.h:13:ds_doubly_list_t* ds_doubly_list_create(const ds_allocator_t* alloc, void);
include/ds/doubly_list.h:14:ds_error_t ds_doubly_list_destroy(ds_doubly_list_t* list);
include/ds/doubly_list.h:15:ds_error_t ds_doubly_list_insert_front(ds_doubly_list_t* list, void* data);
include/ds/doubly_list.h:16:ds_error_t ds_doubly_list_insert_back(ds_doubly_list_t* list, void* data);
include/ds/doubly_list.h:17:ds_error_t ds_doubly_list_insert_at(ds_doubly_list_t* list, size_t index, void* data);
include/ds/doubly_list.h:19:ds_error_t ds_doubly_list_remove_front(ds_doubly_list_t* list, void** out_data);
include/ds/doubly_list.h:20:ds_error_t ds_doubly_list_remove_back(ds_doubly_list_t* list, void** out_data);
include/ds/doubly_list.h:21:ds_error_t ds_doubly_list_remove_at(ds_doubly_list_t* list, size_t index, void** out_data);
include/ds/doubly_list.h:23:ds_error_t ds_doubly_list_get_at(const ds_doubly_list_t* list, size_t index, void** out_data);
include/ds/doubly_list.h:25:bool   ds_doubly_list_is_empty(const ds_doubly_list_t* list);
include/ds/doubly_list.h:26:size_t ds_doubly_list_size(const ds_doubly_list_t* list);
include/ds/doubly_list.h:28:ds_error_t ds_doubly_list_get_stats(const ds_doubly_list_t* list, ds_stats_t* stats);
include/ds/queue.h:22:ds_error_t ds_queue_create(const ds_allocator_t* alloc, ds_queue_t** out_queue);
include/ds/queue.h:29:ds_error_t ds_queue_destroy(ds_queue_t* queue);
include/ds/queue.h:37:ds_error_t ds_queue_enqueue(ds_queue_t* queue, void* data);
include/ds/queue.h:45:ds_error_t ds_queue_dequeue(ds_queue_t* queue, void** data);
include/ds/queue.h:53:ds_error_t ds_queue_front(const ds_queue_t* queue, void** data);
include/ds/queue.h:60:bool ds_queue_is_empty(const ds_queue_t* queue);
include/ds/queue.h:67:size_t ds_queue_size(const ds_queue_t* queue);
include/algo/sort.h:21:ds_error_t ds_sort_bubble(int* arr, size_t n);
include/algo/sort.h:29:ds_error_t ds_sort_insertion(int* arr, size_t n);
include/algo/search.h:23:ds_error_t ds_search_linear(const int* arr, size_t n, int target, ptrdiff_t* out_index);
include/algo/search.h:33:ds_error_t ds_search_binary(const int* arr, size_t n, int target, ptrdiff_t* out_index);
include/data_structures.h:36:typedef void* (*ds_malloc_func_t)(size_t);
include/data_structures.h:37:typedef void  (*ds_free_func_t)(void*);
include/data_structures.h:38:void ds_set_memory_functions(ds_malloc_func_t, ds_free_func_t);
include/data_structures.h:41:typedef ds_error_t (*ds_command_exec_func_t)(void*);
include/data_structures.h:42:typedef ds_error_t (*ds_command_undo_func_t)(void*);
