#include <stdbool.h>
//statistics.cで関数の具体的な計算内容を書く目的だ。

#include "ds/statistics.h"
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <errno.h>

#define MAX_VALUE 100

/**
 * @brief 内部専用：整数比較関数 (qsort用)
 */
static int compare_ints(const void *a, const void *b) {
    return (*(const int *)a - *(const int *)b);
}

int sum(const int *data, int size) {
    if (!data || size <= 0) {
        LOG_ERROR("Invalid input to sum()\n");
        return 0;
    }
    int total = 0;
    for (int i = 0; i < size; i++) total += data[i];
    return total;
}

int min(const int *data, int size) {
    if (!data || size <= 0) {
        LOG_ERROR("Invalid input to min()\n");
        return 0;
    }
    int min_val = data[0];
    for (int i = 1; i < size; i++) if (data[i] < min_val) min_val = data[i];
    return min_val;
}

int max(const int *data, int size) {
    if (!data || size <= 0) {
        LOG_ERROR("Invalid input to max()\n");
        return 0;
    }
    int max_val = data[0];
    for (int i = 1; i < size; i++) if (data[i] > max_val) max_val = data[i];
    return max_val;
}

double average(const int *data, int size) {
    if (!data || size <= 0) {
        LOG_ERROR("Invalid input to average()\n");
        return 0.0;
    }
    return (double)sum(data, size) / size;
}

double median(const int *data, int size) {
    if (!data || size <= 0) {
        LOG_ERROR("Invalid input to median()\n");
        return 0.0;
    }
    int *copy =ds_malloc(sizeof(int) * size);
    if (!copy) {
        LOG_ERROR("Memory allocation failed for median calculation\n");
        return -1.0;
    }
    memcpy(copy, data, sizeof(int) * size);
    qsort(copy, size, sizeof(int), compare_ints);
    double result = (size % 2 == 0)
        ? (copy[size / 2 - 1] + copy[size / 2]) / 2.0
        : copy[size / 2];
   ds_free(copy);
    return result;
}

int mode(const int *data, int size) {
    if (!data || size <= 0) {
        LOG_ERROR("Invalid input to mode()\n");
        return 0;
    }
    int freq[MAX_VALUE + 1] = {0};
    for (int i = 0; i < size; i++)
        if (data[i] >= 0 && data[i] <= MAX_VALUE)
            freq[data[i]]++;
    int mode_val = data[0], max_freq = freq[mode_val];
    for (int i = 1; i < size; i++)
        if (freq[data[i]] > max_freq) {
            max_freq = freq[data[i]];
            mode_val = data[i];
        }
    return mode_val;
}

Statistics calculate_statistics(const int *data, int size) {
    Statistics stats = {0};
    stats.sum     = sum(data, size);
    stats.min     = min(data, size);
    stats.max     = max(data, size);
    stats.average = average(data, size);
    stats.median  = median(data, size);
    stats.mode    = mode(data, size);
    return stats;
}